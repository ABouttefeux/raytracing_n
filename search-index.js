var searchIndex = JSON.parse('{\
"raytracing_n":{"doc":"Raytracing in N dimention","t":"CCCAAAAAAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLDNDNNIDDDDEIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLQDIIDLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLEEDIDNQDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Angle","Ray","Vector","angle","direction","object","space","transformation","utils","vector","Angle","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","default","degree","deref","deref_mut","deserialize","drop","eq","fmt","from","hash","init","into","is_zero","mul","mul","mul_assign","mul_assign","neg","new","new_degree","partial_cmp","radiant","rem_euclidean","serialize","set_radiant","sub","sub_assign","to_owned","try_from","try_into","type_id","zero","Direction","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","drop","eq","fmt","from","hash","index","init","into","new","partial_cmp","serialize","to_owned","try_from","try_into","type_id","Camera","ColinearVector","HyperPlane","NormTooSmall","NotNormalNorm","Object","OrientedOriginPlane","OriginPlane","OriginPlanePlaneWithOffset","Plane","PlaneBuildingError","Render","Triangle","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","deconstruct","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","intersection","into","into","into","into","into","into","into","into","new","new","new","new_origin_plane_with_offset","new_origin_plane_with_offset_struct","new_tree_points","offset","offset","offset_mut","origin_plane_with_offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","plane","plane","plane_mut","points","points_array","position","position","position_mut","provide","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","tree_points","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vectors","Space","add_object","borrow","borrow_mut","camera","deref","deref_mut","drop","from","init","into","new","objects","render","try_from","try_into","type_id","Error","Rotation","Transformable","Transformation","Translation","angle","angle_mut","apply","apply","apply_boxed","apply_boxed","borrow","borrow","borrow_mut","borrow_mut","center","center_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","hash","hash","init","init","into","into","new","new","partial_cmp","partial_cmp","plane","plane_mut","position","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec","vec_mut","ErrorSet","Never","NonNegative","Norm","Normed","NotValid","Output","Positive","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","data","data","data","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","hash","init","init","init","init","init","into","into","into","into","into","new","new","new","new_unchecked","norm","number","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","provide","provide","serialize","serialize","serialize","serialize","serialize","set_data","set_data","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","n_128","n_16","n_180","n_2","n_32","n_4","n_64","n_8","Ray","Vector","add","add_assign","angle_between","are_colinear","borrow","borrow_mut","clone","clone_into","cmp","data","data_mut","default","deref","deref_mut","deserialize","div","div_assign","drop","eq","fmt","from","hash","init","into","into_iter","into_par_iter","is_empty","is_zero","iter","iter_mut","len","mul","mul_assign","neg","new","norm","norm","norm_squared","old_neg","par_iter","par_iter_mut","par_norm","par_norm_squared","partial_cmp","position","ray","scalar_product","serialize","sub","sub_assign","to_owned","try_from","try_into","type_id","zero","Ray","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","direction","drop","eq","fmt","from","hash","init","into","new","new_unormed_direction","partial_cmp","serialize","starting_point","to_owned","try_from","try_into","type_id"],"q":[[0,"raytracing_n"],[10,"raytracing_n::angle"],[50,"raytracing_n::direction"],[74,"raytracing_n::object"],[283,"raytracing_n::space"],[300,"raytracing_n::transformation"],[364,"raytracing_n::utils"],[497,"raytracing_n::utils::number"],[505,"raytracing_n::vector"],[562,"raytracing_n::vector::ray"]],"d":["","","","Defines the class <code>Angle</code>","","Defines the object exhibiting in the space used for …","","Defines the traits <code>Transformation</code> and <code>Transformable</code> and …","utils function and structures","","Represent a angle in radiant.","","","","","","","","","Get the wrapped value in degree","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Creat the angle taking the “euclidean reminder” if …","Crate an angle from degree","","Get the value wrapped. It is guarenteed to be in <code>[0, 2PI[</code>.","Get the euclidean reminder","","Set the angle to the given value wrapping it if necessary","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","The camera defines where will be projecting the rays and …","The two vectors are colinear.","","A vector has a norm that is too small i.e. <code>FpCategory::Zero</code>…","The norm is not classify as normal, i.e. …","","A plane that is oriented in the space.","Define a plane in the space.","","","Error return by the <code>OriginPlane::new</code> function.","","A triangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Try creating a plane from two vectors.","","","","","","","","","","","","","","","","","","","","Get the points of the triangle.","Get the points of the triangle as an array.","","Get the position of the camera.","Get a mutable reference to the position of the camera.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the two vectors defining the plane.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Error type of the transformation","Defines a rotation","","","","Get the angle of the rotation.","Get a mutable reference to the angle of the rotation.","Apply a transformation to an object","","Apply a transformation to an object","","","","","","Get the center of the rotation.","Get a mutable reference to the center of the rotation.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new translation from a vector","<code>angle</code> is the angle of the rotation.<code>center</code> gives around …","","","Get the plane of the rotation.","Get a mutable reference to the plane of the rotation.","Get the position of the object.","","","","","","","","","","","Get the vector of the translation.","Get the mutable vector of the translation.","Error type return by set type functions.","A type that can never be (safely) initialized. This is …","A structure that guarenteen that the stored that is not …","A trait to get a norm a a element.","A structure that guarenteen that the stored that is normed.","Try to set a non valid value.","The output type of the norm.","A structure that guarantee that the stored that is …","","","","","","","","","","","","","","","","","","","","","","","","","","Get the data stored.","Get the data stored.","Get the data. It is guaranteed to be normalized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>Positive</code> with <code>data</code> if data is valid, …","Create a new <code>NonNegative</code> with <code>data</code> if data is valid, …","Try to normalize the data return <code>None</code> if the data is not …","Normalize the data and store it.","Get the norm of the element.","module containing generic number.","","","","","","","","","","","","","Try to set a new value inside the structure.","Try to set a new value inside the structure.","","","","","","","","","","","","","","","","","","","","","","","","","Get 180.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","return true if and only if <code>N = 0</code> Example","","","","","","","","","","","Gives the norm squared, i.e. the some of each element …","","","","","","","","","","","","","","","","","","Semi open line","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,32,0,32,32,0,0,0,0,0,0,0,0,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,35,31,33,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,34,29,30,31,32,33,34,35,36,31,33,35,34,34,34,35,35,35,34,29,30,31,32,33,34,35,36,35,35,35,36,36,29,29,29,32,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,32,34,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,33,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,68,0,0,0,0,46,46,68,48,68,48,48,46,48,46,46,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,46,46,69,48,46,48,46,48,46,48,46,48,46,48,48,0,0,0,0,0,50,54,0,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,52,53,56,52,53,56,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,49,49,50,50,52,53,56,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,52,53,56,56,54,0,49,50,52,53,56,49,50,49,50,52,53,56,52,53,49,50,52,53,56,49,50,49,50,52,53,56,49,50,52,53,56,49,50,52,53,56,0,0,0,0,0,0,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,39,39,39,39,39,39,39,39,39,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[4,[[0,[1,2,3]]]],[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[]],[[]],[[[4,[[0,[6,1,2]]]]],[[4,[[0,[6,1,2]]]]]],[[]],[[[4,[[0,[7,1,2]]]],[4,[[0,[7,1,2]]]]],8],[[],[[4,[[0,[9,1,2]]]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[10],[10],[11,[[13,[[4,[[0,[12,1,2]]]]]]]],[10],[[[4,[[0,[14,1,2]]]],[4,[[0,[14,1,2]]]]],15],[[[4,[[0,[16,1,2]]]],17],18],[[]],[[[4,[[0,[19,1,2]]]],20]],[[],10],[[]],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2]]]],[0,[1,2]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,21]]]],[0,[1,2,21]]]],[[[4,[[0,[1,2,21]]]],[4,[[0,[1,2,21]]]]]],[[[4,[[0,[1,2]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[22,1,2]]]],[4,[[0,[22,1,2]]]]],[[23,[8]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[1,1],1],[[[4,[[0,[24,1,2]]]],25],13],[[[4,[[0,[1,2]]]],[0,[1,2]]]],[[[4,[[0,[1,2,2]]]],[4,[[0,[1,2,2]]]]]],[[[4,[[0,[1,2,26]]]],[4,[[0,[1,2,26]]]]]],[[]],[[],13],[[],13],[[],27],[[],[[4,[[0,[1,2]]]]]],0,[[]],[[]],[28,28],[[]],[[28,28],8],[10],[10],[11,[[13,[28]]]],[10],[[28,28],15],[[28,17],18],[[]],[[28,20]],[28,10],[[],10],[[]],[10,[[23,[28]]]],[[28,28],[[23,[8]]]],[[28,25],13],[[]],[[],13],[[],13],[[],27],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[29,[[0,[6,1,2]]]]],[[29,[[0,[6,1,2]]]]]],[[[30,[[0,[6,1,2]]]]],[[30,[[0,[6,1,2]]]]]],[[[31,[[0,[6,1]]]]],[[31,[[0,[6,1]]]]]],[32,32],[[[33,[[0,[6,1]]]]],[[33,[[0,[6,1]]]]]],[[[34,[[0,[6,1]]]]],[[34,[[0,[6,1]]]]]],[[[35,[[0,[6,1]]]]],[[35,[[0,[6,1]]]]]],[[[36,[[0,[6,1]]]]],[[36,[[0,[6,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[29,[[0,[7,1,2]]]],[29,[[0,[7,1,2]]]]],8],[[[30,[[0,[7,1,2]]]],[30,[[0,[7,1,2]]]]],8],[[[31,[[0,[7,1]]]],[31,[[0,[7,1]]]]],8],[[32,32],8],[[[33,[[0,[7,1]]]],[33,[[0,[7,1]]]]],8],[[[34,[[0,[7,1]]]],[34,[[0,[7,1]]]]],8],[[[35,[[0,[7,1]]]],[35,[[0,[7,1]]]]],8],[[[36,[[0,[7,1]]]],[36,[[0,[7,1]]]]],8],[[[35,[1]]]],[[],[[31,[[0,[9,1]]]]]],[[],[[33,[[0,[9,1]]]]]],[[],[[36,[[0,[9,1]]]]]],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[11,[[13,[[29,[[0,[12,1,2]]]]]]]],[11,[[13,[[30,[[0,[12,1,2]]]]]]]],[11,[[13,[[31,[[0,[12,1]]]]]]]],[11,[[13,[32]]]],[11,[[13,[[33,[[0,[12,1]]]]]]]],[11,[[13,[[34,[[0,[12,1]]]]]]]],[11,[[13,[[35,[[0,[12,1]]]]]]]],[11,[[13,[[36,[[0,[12,1]]]]]]]],[10],[10],[10],[10],[10],[10],[10],[10],[[[29,[[0,[14,1,2]]]],[29,[[0,[14,1,2]]]]],15],[[[30,[[0,[14,1,2]]]],[30,[[0,[14,1,2]]]]],15],[[[31,[[0,[14,1]]]],[31,[[0,[14,1]]]]],15],[[32,32],15],[[[33,[[0,[14,1]]]],[33,[[0,[14,1]]]]],15],[[[34,[[0,[14,1]]]],[34,[[0,[14,1]]]]],15],[[[35,[[0,[14,1]]]],[35,[[0,[14,1]]]]],15],[[[36,[[0,[14,1]]]],[36,[[0,[14,1]]]]],15],[[[29,[[0,[16,1,2]]]],17],18],[[[30,[[0,[16,1,2]]]],17],18],[[[31,[[0,[16,1]]]],17],18],[[32,17],18],[[32,17],18],[[[33,[[0,[16,1]]]],17],18],[[[34,[[0,[16,1]]]],17],18],[[[35,[[0,[16,1]]]],17],18],[[[36,[[0,[16,1]]]],17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[29,[[0,[19,1,2]]]],20]],[[[30,[[0,[19,1,2]]]],20]],[[[31,[[0,[19,1]]]],20]],[[32,20]],[[[33,[[0,[19,1]]]],20]],[[[34,[[0,[19,1]]]],20]],[[[35,[[0,[19,1]]]],20]],[[[36,[[0,[19,1]]]],20]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[[34,[[0,[1,6,37]]]],[38,[[0,[1,6,37]]]]],[[23,[[39,[[0,[1,6,37]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[39,[[39,[1]]]],[39,[1]]],[[23,[[31,[1]]]]]],[[[39,[[0,[1,37]]]],[39,[[0,[1,37]]]]],[[13,[[33,[[0,[1,37]]]],32]]]],[[[33,[1]],[39,[1]]],[[35,[1]]]],[[[33,[1]],[39,[1]]],[[34,[1]]]],[[[35,[1]]],[[34,[1]]]],[[[39,[[39,[1]]]]],[[34,[1]]]],[[[35,[1]]],[[39,[1]]]],0,[[[35,[1]]],[[39,[1]]]],[[[34,[1]]],[[35,[1]]]],[[[29,[[0,[22,1,2]]]],[29,[[0,[22,1,2]]]]],[[23,[8]]]],[[[30,[[0,[22,1,2]]]],[30,[[0,[22,1,2]]]]],[[23,[8]]]],[[[31,[[0,[22,1]]]],[31,[[0,[22,1]]]]],[[23,[8]]]],[[32,32],[[23,[8]]]],[[[33,[[0,[22,1]]]],[33,[[0,[22,1]]]]],[[23,[8]]]],[[[34,[[0,[22,1]]]],[34,[[0,[22,1]]]]],[[23,[8]]]],[[[35,[[0,[22,1]]]],[35,[[0,[22,1]]]]],[[23,[8]]]],[[[36,[[0,[22,1]]]],[36,[[0,[22,1]]]]],[[23,[8]]]],[[[35,[1]]],[[33,[1]]]],0,[[[35,[1]]],[[33,[1]]]],[[[36,[1]]],[[39,[[39,[1]]]]]],[[[36,[1]]]],[[[29,[[0,[1,2]]]]],[[39,[[0,[1,2]]]]]],[[[29,[[0,[1,2]]]]],[[39,[[0,[1,2]]]]]],[[[29,[[0,[1,2]]]]],[[39,[[0,[1,2]]]]]],[40],[[[29,[[0,[24,1,2]]]],25],13],[[[30,[[0,[24,1,2]]]],25],13],[[[31,[[0,[24,1]]]],25],13],[[32,25],13],[[[33,[[0,[24,1]]]],25],13],[[[34,[[0,[24,1]]]],25],13],[[[35,[[0,[24,1]]]],25],13],[[[36,[[0,[24,1]]]],25],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],41],[[[34,[1]]],[[39,[[39,[1]]]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[[33,[1]]]],0,[[[42,[[0,[1,2]]]],[44,[43]]]],[[]],[[]],[[[42,[[0,[1,2]]]]],[[29,[[0,[1,2]]]]]],[10],[10],[10],[[]],[[],10],[[]],[[[29,[[0,[1,2]]]]],[[42,[[0,[1,2]]]]]],[[[42,[[0,[1,2]]]]],[[45,[[44,[43]]]]]],[[[42,[[0,[1,2]]]]]],[[],13],[[],13],[[],27],0,0,0,0,0,[[[46,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[46,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[47,[[13,[47]]]],[[[48,[[0,[1,5]]]],[39,[[0,[1,5]]]]],[[13,[[39,[[0,[1,5]]]]]]]],[[],[[13,[44]]]],[[[48,[[0,[1,5]]]],[39,[[0,[1,5]]]]],[[13,[[44,[[39,[[0,[1,5]]]]]]]]]],[[]],[[]],[[]],[[]],[[[46,[[0,[1,2]]]]],[[39,[[0,[1,2]]]]]],[[[46,[[0,[1,2]]]]],[[39,[[0,[1,2]]]]]],[[[48,[[0,[6,1]]]]],[[48,[[0,[6,1]]]]]],[[[46,[[0,[6,1,2]]]]],[[46,[[0,[6,1,2]]]]]],[[]],[[]],[[[48,[[0,[7,1]]]],[48,[[0,[7,1]]]]],8],[[[46,[[0,[7,1,2]]]],[46,[[0,[7,1,2]]]]],8],[[],[[48,[[0,[9,1]]]]]],[[],[[46,[[0,[9,1,2]]]]]],[10],[10],[10],[10],[11,[[13,[[48,[[0,[12,1]]]]]]]],[11,[[13,[[46,[[0,[12,1,2]]]]]]]],[10],[10],[[[48,[[0,[14,1]]]],[48,[[0,[14,1]]]]],15],[[[46,[[0,[14,1,2]]]],[46,[[0,[14,1,2]]]]],15],[[[48,[[0,[16,1]]]],17],18],[[[46,[[0,[16,1,2]]]],17],18],[[]],[[]],[[[48,[[0,[19,1]]]],20]],[[[46,[[0,[19,1,2]]]],20]],[[],10],[[],10],[[]],[[]],[[[39,[1]]],[[48,[1]]]],[[[4,[[0,[1,2]]]],[39,[[0,[1,2]]]],[33,[[0,[1,2]]]]],[[46,[[0,[1,2]]]]]],[[[48,[[0,[22,1]]]],[48,[[0,[22,1]]]]],[[23,[8]]]],[[[46,[[0,[22,1,2]]]],[46,[[0,[22,1,2]]]]],[[23,[8]]]],[[[46,[[0,[1,2]]]]],[[33,[[0,[1,2]]]]]],[[[46,[[0,[1,2]]]]],[[33,[[0,[1,2]]]]]],[[],39],[[[48,[[0,[24,1]]]],25],13],[[[46,[[0,[24,1,2]]]],25],13],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],27],[[],27],[[[48,[1]]],[[39,[1]]]],[[[48,[1]]],[[39,[1]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[49,49],[50,50],[[[52,[[0,[6,47,22,51]]]]],[[52,[[0,[6,47,22,51]]]]]],[[[53,[[0,[6,47,22,51]]]]],[[53,[[0,[6,47,22,51]]]]]],[[[56,[[0,[54,55,6]]]]],[[56,[[0,[54,55,6]]]]]],[[]],[[]],[[]],[[]],[[]],[[49,49],8],[[50,50],8],[[[52,[[0,[7,47,22,51]]]],[52,[[0,[7,47,22,51]]]]],8],[[[53,[[0,[7,47,22,51]]]],[53,[[0,[7,47,22,51]]]]],8],[[[56,[[0,[54,55,7]]]],[56,[[0,[54,55,7]]]]],8],[[[52,[[0,[47,22,51]]]]],[[0,[47,22,51]]]],[[[53,[[0,[47,22,51]]]]],[[0,[47,22,51]]]],[[[56,[[0,[54,55]]]]],[[0,[54,55]]]],[[],[[52,[[0,[9,47,22,51]]]]]],[[],[[53,[[0,[9,47,22,51]]]]]],[[],[[56,[[0,[54,55,9]]]]]],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[11,[[13,[49]]]],[11,[[13,[50]]]],[11,[[13,[[52,[[0,[12,47,22,51]]]]]]]],[11,[[13,[[53,[[0,[12,47,22,51]]]]]]]],[11,[[13,[[56,[[0,[54,55,12]]]]]]]],[10],[10],[10],[10],[10],[[49,49],15],[[50,50],15],[[[52,[[0,[14,47,22,51]]]],[52,[[0,[14,47,22,51]]]]],15],[[[53,[[0,[14,47,22,51]]]],[53,[[0,[14,47,22,51]]]]],15],[[[56,[[0,[54,55,14]]]],[56,[[0,[54,55,14]]]]],15],[[49,17],18],[[49,17],18],[[50,17],18],[[50,17],18],[[[52,[[0,[16,47,22,51]]]],17],18],[[[53,[[0,[16,47,22,51]]]],17],18],[[[56,[[0,[54,55,16]]]],17],18],[[]],[[]],[[]],[[]],[[]],[[49,20]],[[50,20]],[[[52,[[0,[19,47,22,51]]]],20]],[[[53,[[0,[19,47,22,51]]]],20]],[[[56,[[0,[54,55,19]]]],20]],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[[0,[47,22,51]]],[[23,[[52,[[0,[47,22,51]]]]]]]],[[[0,[47,22,51]]],[[23,[[53,[[0,[47,22,51]]]]]]]],[[[0,[54,55]]],[[23,[[56,[[0,[54,55]]]]]]]],[[[0,[54,55]]],[[56,[[0,[54,55]]]]]],[[]],0,[[49,49],[[23,[8]]]],[[50,50],[[23,[8]]]],[[[52,[[0,[22,47,22,51]]]],[52,[[0,[22,47,22,51]]]]],[[23,[8]]]],[[[53,[[0,[22,47,22,51]]]],[53,[[0,[22,47,22,51]]]]],[[23,[8]]]],[[[56,[[0,[54,55,22]]]],[56,[[0,[54,55,22]]]]],[[23,[8]]]],[40],[40],[[49,25],13],[[50,25],13],[[[52,[[0,[24,47,22,51]]]],25],13],[[[53,[[0,[24,47,22,51]]]],25],13],[[[56,[[0,[54,55,24]]]],25],13],[[[52,[[0,[47,22,51]]]],[0,[47,22,51]]],[[13,[50]]]],[[[53,[[0,[47,22,51]]]],[0,[47,22,51]]],[[13,[50]]]],[[]],[[]],[[]],[[]],[[]],[[],41],[[],41],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],27],[[],27],[[],27],[[],27],[[],27],[[],[[0,[57,3]]]],[[],[[0,[57,3]]]],[[],[[0,[57,3]]]],[[],[[0,[57,3]]]],[[],[[0,[57,3]]]],[[],[[0,[57,3]]]],[[],[[0,[57,3]]]],[[],[[0,[57,3]]]],0,0,[[[39,[5]],[39,[5]]]],[[[39,[5]],[39,[5]]]],[[[39,[[0,[1,6,37,2]]]],[39,[[0,[1,6,37,2]]]]],[[4,[[0,[1,6,37,2]]]]]],[[[39,[[0,[1,6,37]]]],[39,[[0,[1,6,37]]]]],15],[[]],[[]],[[[39,[6]]],[[39,[6]]]],[[]],[[[39,[7]],[39,[7]]],8],[39],[39],[[],[[39,[[0,[9,58]]]]]],[10],[10],[11,[[13,[[39,[12]]]]]],[[[39,[[0,[59,6]]]],[0,[59,6]]]],[[[39,[[0,[59,6]]]],[0,[59,6]]]],[10],[[[39,[14]],[39,[14]]],15],[[[39,[16]],17],18],[[]],[[[39,[19]],20]],[[],10],[[]],[39],[[[39,[[0,[60,61]]]]],[[0,[62,63]]]],[39,15],[[[39,[[0,[51,58,5]]]]],15],[39,[[0,[64,65,66]]]],[39,[[0,[64,65,66]]]],[39,10],[[[39,[[0,[21,6]]]],[0,[21,6]]]],[[[39,[[0,[21,6]]]],[0,[21,6]]]],[[[39,[67]]]],[[],39],[[[39,[[0,[1,6,37]]]]]],[[[39,[[0,[1,6,37]]]]],[[0,[1,6,37]]]],[[[39,[[0,[1,6,37]]]]],[[0,[1,6,37]]]],[[[39,[[0,[67,6]]]]],39],[[[39,[[0,[60,61]]]]],[[0,[62,63]]]],[[[39,[[0,[60,61]]]]],[[0,[62,63]]]],[[[39,[[0,[1,6,37,61,60]]]]],[[0,[1,6,37,61,60]]]],[[[39,[[0,[1,6,37,61,60]]]]],[[0,[1,6,37,61,60]]]],[[[39,[22]],[39,[22]]],[[23,[8]]]],[[[39,[1]]],[[39,[1]]]],0,[[[39,[[0,[1,37]]]],[39,[[0,[1,37]]]]],[[0,[1,37]]]],[[[39,[24]],25],13],[[[39,[26]],[39,[26]]]],[[[39,[26]],[39,[26]]]],[[]],[[],13],[[],13],[[],27],[[],[[39,[[0,[51,58,5]]]]]],0,[[]],[[]],[[[38,[[0,[1,6,37,6]]]]],[[38,[[0,[1,6,37,6]]]]]],[[]],[[[38,[[0,[1,6,37,7]]]],[38,[[0,[1,6,37,7]]]]],8],[10],[10],[11,[[13,[[38,[[0,[1,6,37,12]]]]]]]],[[[38,[[0,[1,6,37]]]]],[[56,[[39,[[0,[1,6,37]]]]]]]],[10],[[[38,[[0,[1,6,37,14]]]],[38,[[0,[1,6,37,14]]]]],15],[[[38,[[0,[1,6,37,16]]]],17],18],[[]],[[[38,[[0,[1,6,37,19]]]],20]],[[],10],[[]],[[[39,[[0,[1,6,37]]]],[56,[[39,[[0,[1,6,37]]]]]]],[[38,[[0,[1,6,37]]]]]],[[[39,[[0,[1,6,37]]]],[39,[[0,[1,6,37]]]]],[[23,[[38,[[0,[1,6,37]]]]]]]],[[[38,[[0,[1,6,37,22]]]],[38,[[0,[1,6,37,22]]]]],[[23,[8]]]],[[[38,[[0,[1,6,37,24]]]],25],13],[[[38,[[0,[1,6,37]]]]],[[39,[[0,[1,6,37]]]]]],[[]],[[],13],[[],13],[[],27]],"c":[],"p":[[8,"Float"],[8,"FloatConst"],[8,"Add"],[3,"Angle"],[8,"AddAssign"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[15,"usize"],[8,"Deserializer"],[8,"Deserialize"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[8,"MulAssign"],[8,"PartialOrd"],[4,"Option"],[8,"Serialize"],[8,"Serializer"],[8,"SubAssign"],[3,"TypeId"],[3,"Direction"],[3,"Camera"],[3,"OrientedOriginPlane"],[3,"HyperPlane"],[4,"PlaneBuildingError"],[3,"OriginPlane"],[3,"Plane"],[3,"OriginPlanePlaneWithOffset"],[3,"Triangle"],[8,"Sum"],[3,"Ray"],[3,"Vector"],[3,"Demand"],[3,"String"],[3,"Space"],[8,"Render"],[3,"Box"],[3,"Vec"],[3,"Rotation"],[8,"Sized"],[3,"Translation"],[4,"Never"],[4,"ErrorSet"],[8,"Zero"],[3,"Positive"],[3,"NonNegative"],[8,"Norm"],[8,"Div"],[3,"Normed"],[8,"One"],[8,"Copy"],[8,"DivAssign"],[8,"Send"],[8,"Sync"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"Iterator"],[8,"FusedIterator"],[8,"ExactSizeIterator"],[8,"Neg"],[8,"Transformation"],[8,"Transformable"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
